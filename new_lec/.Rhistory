summary(lm.fit)
lm.fit2 = step(lm.fit, method="both")
summary(lm.fit2)
lm.pred = predict(lm.fit2, newdata=juice_test)
kk_lm = mean((lm.pred-juice_test$Count_Q)^2)
kk_lm = mean((lm.pred-juice_test$Count_QTY)^2)
kk_lm
sqrt(kk_lm)
plot(lm.pred, juice_test$QTY)
plot(lm.pred, juice_test$Count_QTY)
library(caret)
confusionMatrix(lm.pred, juice_test$Count_QTY)
confusionMatrix(lm.pred, juice_test$Count_QTY)
tree.fit = tree(QTY~., data = juice_train)
tree.fit = tree(Count_QTY~., data = juice_train)
summary(tree.fit)
plot(tree.fit)
text(tree.fit, pretty=0)
tree.pred = predict(tree.fit, newdata = juice_test)
mean((tree.pred-juice_test$Count_QTY)^2)
kk_dt =mean((tree.pred-juice_test$Count_QTY)^2)
kk_dt
sqrt(kk_dt)
##### 의사결정트리 기법2 using rpart #####
library(rpart)
rpart.fit = rpart(Count_QTY~., data = juice_train)
summary(rpart.fit)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(rpart.fit, digits=3, type = 0 ,extra = 1, fallen.leaves = F, cex=1)
rpart.pred = predict(rpart.fit, newdata = juice_test)
kk_rp = mean((rpart.pred-juice_test$Count_QTY)^2)
kk_rp
sqrt(kk_rp)
##### 인공신경망 기법 #####
normalize = function(x){
return((x-min(x))/(max(x)-min(x)))
}
juice_train_norm = as.data.frame(sapply(juice_train, normalize))
juice_test_norm = as.data.frame(sapply(juice_test, normalize))
library(nnet)
nnet.fit(Count_QTY~., data= juice_train_norm, size = 5)
nnet.fit= nnet(Count_QTY~., data= juice_train_norm, size = 5)
nnet.pred = predict(nnet.fit, newdata=juice_test_norm, type='raw')
nnet.fit= nnet(Count_QTY~., data= juice_train_norm, size = 5)
nnet.pred = predict(nnet.fit, newdata=juice_test_norm, type='raw')
kk_nn = mean((nnet.pred-juice_test_norm$Count_QTY)^2)
kk_nn
sqrt(kk_nn)
##### 인공신경망 기법2 using neuralnet #####
library(neuralnet)
##### 인공신경망 기법2 using neuralnet #####
install.packages("neuralnet")
library(neuralnet)
colnames(juice_train)
neural.fit = neuralent(Count_QTY~ITEM_CNT+PRICE+MAXTEMP+SALEDAY+RAIN_DAY+HOLIDAY, data=juice_train_norm, hidden=5)
neural.fit = neuralent(Count_QTY~ITEM_CNT+PRICE+MAXTEMP+SALEDAY+RAIN_DAY+HOLIDAY, data=juice_train_norm, hidden=5)
neural.fit = neuralnet(Count_QTY~ITEM_CNT+PRICE+MAXTEMP+SALEDAY+RAIN_DAY+HOLIDAY, data=juice_train_norm, hidden=5)
neural.results = coompute(neural.fit, juice_test_norm[1:6])
neural.results = compute(neural.fit, juice_test_norm[1:6])
neural_pred = neural.results$net.result
kk_nl = mean((neural_pred-juice_test_norm$Count_QTY)^2)
kk_nl
sqrt(kk_nl)
##### 앙상블 기법 #####
library(randomForest)
##### 앙상블 기법 #####
install.packages("randomForest")
library(randomForest)
set.seed(1)
rf.fit = randomForest(Count_QTY~., data = juice_train, mtry=6, importance=T)
rf.fit
plot(rf.fit)
importance(rf.fit)
varlmpPlot(rf.fit)
varImpPlot(rf.fit)
rf.pred = predict(rf.fit, newdata = juice_test)
kk_rf = mean((rf.pred-juice_test$Count_QTY)^2)
kk_rf
sqrt(kk_rf)
kk_lm
sqrt(kk_lm)
kk_dt
sqrt(kk_dt)
kk_rp
sqrt(kk_rp)
kk_nn
sqrt(kk_nn)
kk_nl
sqrt(kk_nl)
kk_rf
sqrt(kk_rf)
lm.pred = predict(lm.fit2, newdata=juice_test)
lm.pred
table(lm.pred, juice_test$Count_QTY)
rsq <- function (x, y) cor(x, y) ^ 2
rsq <- function (x, y) cor(lm.pred,juice_test) ^ 2
rsq
rsq <- function (x, y) cor(lm.pred,juice_test$Count_QTY) ^ 2
rsq
rsq <- function (x, y) {cor(lm.pred, juice_test$Count_QTY) ^ 2}
rsq
rsq()
table(lm.pred, juice_test$Count_QTY)
lm.pred/juice_test$Count_QTY
juice_train
lm.fit2 = step(lm.fit, method="both")
summary(lm.fit2)
colnames(juice_train)
## 변수 holiday 제거
juice_train_rm_hd = juice_train[, -6]
juice_train_rm_hd
lm.fit3 = lm(Count_QTY~., data=juice_train_rm_hd)
summary(lm.fit3)
lm.fit4 = step(lm.fit3, method="both")
lm.pred = predict(lm.fit4, newdata=juice_test)
lm.fit4 = step(lm.fit3, method="both")
lm.pred2 = predict(lm.fit4, newdata=juice_test)
lm.pred2/juice_test$Count_QTY
juice_test
juice_test_rm_hd = juice_test[,-6]
## 변수 holiday 제거
juice_train_rm_hd = juice_train[, -6]
juice_test_rm_hd = juice_test[,-6]
lm.fit3 = lm(Count_QTY~., data=juice_train_rm_hd)
summary(lm.fit3)
lm.fit4 = step(lm.fit3, method="both")
lm.pred2 = predict(lm.fit4, newdata=juice_test_rm_hd)
lm.pred2/juice_test_rm_hd$Count_QTY
rsq <- function (x, y) {cor(lm.pred2, juice_test_rm_hd$Count_QTY) ^ 2}
rsq()
##### 다중 회귀분석 기법 사용 ##### =>평균제곱오차: 9.693173 제곱근: 3.113386
lm.fit = lm(Count_QTY~., data=juice_train)
summary(lm.fit)
lm.fit2 = step(lm.fit, method="both")
summary(lm.fit2)
juice_train
lm.pred = predict(lm.fit2, newdata=juice_test)
table(lm.pred, juice_test$Count_QTY)
lm.pred/juice_test$Count_QTY
rsq <- function (x, y) {cor(lm.pred, juice_test$Count_QTY) ^ 2}
rsq()
rsq()
## 변수 holiday 제거
juice_train
## 변수 holiday 제거
juice_train_rm_hd_pr = juice_train[, -c(2,6)]
juice_test_rm_hd_pr = juice_test[,-c(2,6)]
## 변수 holiday 제거
juice_train_rm_hd_pr = juice_train[, -c(2,6)]
juice_test_rm_hd_pr = juice_test[,-c(2,6)]
lm.fit3 = lm(Count_QTY~., data=juice_train_rm_hd_pr)
summary(lm.fit3)
lm.fit4 = step(lm.fit3, method="both")
lm.pred2 = predict(lm.fit4, newdata=juice_test_rm_hd_pr)
lm.pred2/juice_test_rm_hd_pr$Count_QTY
rsq <- function (x, y) {cor(lm.pred2, juice_test_rm_hd_pr$Count_QTY) ^ 2}
rsq()
plot(rsq())
plot(lm.pred2)
plot(lm.pred2, juice_test)
plot(lm.pred2, juice_test_rm_hd_pr)
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
table(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
coefficients(lm.pred2)
coef(lm.pred2 ~ juice_test_rm_hd_pr$Count_QTY)
coef(lm.pred2 , juice_test_rm_hd_pr$Count_QTY)
plot(y=x)
x = c(25,30,35,40)
y = c(25,30,35,40)
plot(x,y)
plot(x,y, type='l')
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
par(new=TRUE)
plot(x,y, type='l')
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
plot(x,y, type='l')
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
par(new=TRUE)
plot(x,y, type='l')
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
plot(x,y, type='l')
par(new=TRUE)
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
par(new=FALSE)
plot(x,y, type='l')
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
library(ggplot2)
x = c(25,30,35,40)
y = c(25,30,35,40)
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
line(x,y, type='l')
line(x,y, col="green")
lines(x,y, col="green")
lines(x,y, col="red")
x = c(20,25,30,35,40)
y = c(20,25,30,35,40)
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
lines(x,y, col="red")
x = c(20,25,30,35,40,45)
y = c(20,25,30,35,40,45)
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
lines(x,y, col="red")
x = seq(1,100)
y = x
abline(x,y, col="red")
abline(x, col="red")
x = seq(1,100)
y = x
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
abline(x, col="red")
abline(x, y, col="red")
x = seq(1,100)
y = x
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY, xlim=c(0, 100), ylim=c(0, 90))
abline(x, y, col="red")
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY, xlim=c(10, 45), ylim=c(10, 45))
abline(x, y, col="red")
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY, xlim=c(20, 45), ylim=c(20, 45))
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY, xlim=c(20, 45), ylim=c(20, 45))
abline(x, y, col="red")
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY, xlim=c(0, 45), ylim=c(0, 45))
abline(x, y, col="red")
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY, xlim=c(20, 45), ylim=c(20, 45))
abline(x, y, col="red")
abline(x=y, col="red")
abline(y=c, col="red")
abline(y=x, col="red")
abline(x,y, col="red")
rsq = function(x, y) {
cor(x, y) ^ 2
}
rsq(m.pred, juice_test$Count_QTY)
rsq = function(x, y) {
cor(x, y) ^ 2
}
rsq = function(x, y){
cor(x, y)^2
}
rsq(m.pred, juice_test$Count_QTY)
rsq(lm.pred, juice_test$Count_QTY)
juice = read.csv("C:/Users/709-000/Downloads/(8.23)juice1.csv")
head(juice)
warnings()
juice = read.csv("C:/Users/709-000/Downloads/(8.23)juice1.csv")
head(juice)
tail(juice)
juice1 = juice[, -c(1,2,3,5)]
juice1$Count_QTY = juice$QTY/juice$ITEM_CNT
head(juice1)
idx = sample(1:nrow(juice1), size=nrow(juice)*0.7, replace=F)
juice_train = juice1[idx, ]
juice_test = juice1[-idx, ]
## RSQ(결정 계수)는 주어진 값을 기준으로 피어슨 상관 계수의 제곱을 구하는 것
## 또한 조정의 정확도를 측정하는 단위이며, 회귀 분석을 만만드는데 사용할 수 있음.
rsq = function(x, y){
cor(x, y)^2
}
library(caret)
##### 다중 회귀분석 기법 사용 ##### =>평균제곱오차: 9.693173 제곱근: 3.113386
lm.fit = lm(Count_QTY~., data=juice_train)
summary(lm.fit)
lm.fit2 = step(lm.fit, method="both")
summary(lm.fit2)
juice = read.csv("C:/Users/709-000/Downloads/(8.23)juice1.csv")
head(juice)
tail(juice)
juice1 = juice[, -c(1,2,3,5)]
juice1$Count_QTY = juice$QTY/juice$ITEM_CNT
head(juice1)
idx = sample(1:nrow(juice1), size=nrow(juice)*0.7, replace=F)
juice_train = juice1[idx, ]
juice_test = juice1[-idx, ]
## RSQ(결정 계수)는 주어진 값을 기준으로 피어슨 상관 계수의 제곱을 구하는 것
## 또한 조정의 정확도를 측정하는 단위이며, 회귀 분석을 만만드는데 사용할 수 있음.
rsq = function(x, y){
cor(x, y)^2
}
library(caret)
##### 다중 회귀분석 기법 사용 ##### =>평균제곱오차: 9.693173 제곱근: 3.113386
lm.fit = lm(Count_QTY~., data=juice_train)
summary(lm.fit)
## ITEM_CNT ** PRICE . MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
summary(lm.fit)
lm.fit2 = step(lm.fit, method="both")
summary(lm.fit2)
idx = sample(1:nrow(juice1), size=nrow(juice)*0.7, replace=F)
juice_train = juice1[idx, ]
juice_test = juice1[-idx, ]
## RSQ(결정 계수)는 주어진 값을 기준으로 피어슨 상관 계수의 제곱을 구하는 것
## 또한 조정의 정확도를 측정하는 단위이며, 회귀 분석을 만만드는데 사용할 수 있음.
rsq = function(x, y){
cor(x, y)^2
}
library(caret)
##### 다중 회귀분석 기법 사용 ##### =>평균제곱오차: 9.693173 제곱근: 3.113386
lm.fit = lm(Count_QTY~., data=juice_train)
## ITEM_CNT ** PRICE . MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
summary(lm.fit)
lm.fit
lm.fit[0]
lm.fit[1]
lm.fit[2]
lm.fit[3]
lm.fit[5]
lm.fit[7]
lm.fit[8]
lm.fit[10]
lm.fit[11]
lm.fit[12]
lm.fit[13]
lm.fit[14]
lm.fit[9]
idx = sample(1:nrow(juice1), size=nrow(juice)*0.7, replace=F)
juice_train = juice1[idx, ]
juice_test = juice1[-idx, ]
## RSQ(결정 계수)는 주어진 값을 기준으로 피어슨 상관 계수의 제곱을 구하는 것
## 또한 조정의 정확도를 측정하는 단위이며, 회귀 분석을 만만드는데 사용할 수 있음.
rsq = function(x, y){
cor(x, y)^2
}
library(caret)
##### 다중 회귀분석 기법 사용 ##### =>평균제곱오차: 9.693173 제곱근: 3.113386
lm.fit = lm(Count_QTY~., data=juice_train)
## ITEM_CNT ** PRICE . MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
summary(lm.fit)
idx = sample(1:nrow(juice1), size=nrow(juice)*0.7, replace=F)
juice_train = juice1[idx, ]
juice_test = juice1[-idx, ]
## RSQ(결정 계수)는 주어진 값을 기준으로 피어슨 상관 계수의 제곱을 구하는 것
## 또한 조정의 정확도를 측정하는 단위이며, 회귀 분석을 만만드는데 사용할 수 있음.
rsq = function(x, y){
cor(x, y)^2
}
library(caret)
##### 다중 회귀분석 기법 사용 ##### =>평균제곱오차: 9.693173 제곱근: 3.113386
lm.fit = lm(Count_QTY~., data=juice_train)
## ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
## ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
## ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
## ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
## ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
summary(lm.fit)
idx = sample(1:nrow(juice1), size=nrow(juice)*0.7, replace=F)
juice_train = juice1[idx, ]
juice_test = juice1[-idx, ]
## RSQ(결정 계수)는 주어진 값을 기준으로 피어슨 상관 계수의 제곱을 구하는 것
## 또한 조정의 정확도를 측정하는 단위이며, 회귀 분석을 만만드는데 사용할 수 있음.
rsq = function(x, y){
cor(x, y)^2
}
library(caret)
##### 다중 회귀분석 기법 사용 ##### =>평균제곱오차: 9.693173 제곱근: 3.113386
lm.fit = lm(Count_QTY~., data=juice_train)
##1번 시도 ITEM_CNT * PRICE  MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY
##2번 시도 ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
## ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
## ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
## ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
summary(lm.fit)
idx = sample(1:nrow(juice1), size=nrow(juice)*0.7, replace=F)
juice_train = juice1[idx, ]
juice_test = juice1[-idx, ]
## RSQ(결정 계수)는 주어진 값을 기준으로 피어슨 상관 계수의 제곱을 구하는 것
## 또한 조정의 정확도를 측정하는 단위이며, 회귀 분석을 만만드는데 사용할 수 있음.
rsq = function(x, y){
cor(x, y)^2
}
library(caret)
##### 다중 회귀분석 기법 사용 ##### =>평균제곱오차: 9.693173 제곱근: 3.113386
lm.fit = lm(Count_QTY~., data=juice_train)
##1번 시도 ITEM_CNT * PRICE  MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY
##2번 시도 ITEM_CNT . PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY **  HOLIDAY
##3번 시도 ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
## ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
## ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
summary(lm.fit)
idx = sample(1:nrow(juice1), size=nrow(juice)*0.7, replace=F)
juice_train = juice1[idx, ]
juice_test = juice1[-idx, ]
## RSQ(결정 계수)는 주어진 값을 기준으로 피어슨 상관 계수의 제곱을 구하는 것
## 또한 조정의 정확도를 측정하는 단위이며, 회귀 분석을 만만드는데 사용할 수 있음.
rsq = function(x, y){
cor(x, y)^2
}
library(caret)
##### 다중 회귀분석 기법 사용 ##### =>평균제곱오차: 9.693173 제곱근: 3.113386
lm.fit = lm(Count_QTY~., data=juice_train)
##1번 시도 ITEM_CNT * PRICE   MAXTEMP *** SALEDAY ***  RAIN_DAY *   HOLIDAY
##2번 시도 ITEM_CNT . PRICE   MAXTEMP *** SALEDAY ***  RAIN_DAY **  HOLIDAY
##3번 시도 ITEM_CNT * PRICE . MAXTEMP *** SALEDAY ***  RAIN_DAY **  HOLIDAY .
##4번 시도 ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
##5번 시도 ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
summary(lm.fit)
idx = sample(1:nrow(juice1), size=nrow(juice)*0.7, replace=F)
juice_train = juice1[idx, ]
juice_test = juice1[-idx, ]
## RSQ(결정 계수)는 주어진 값을 기준으로 피어슨 상관 계수의 제곱을 구하는 것
## 또한 조정의 정확도를 측정하는 단위이며, 회귀 분석을 만만드는데 사용할 수 있음.
rsq = function(x, y){
cor(x, y)^2
}
library(caret)
##### 다중 회귀분석 기법 사용 ##### =>평균제곱오차: 9.693173 제곱근: 3.113386
lm.fit = lm(Count_QTY~., data=juice_train)
##1번 시도 ITEM_CNT * PRICE   MAXTEMP *** SALEDAY ***  RAIN_DAY *   HOLIDAY
##2번 시도 ITEM_CNT . PRICE   MAXTEMP *** SALEDAY ***  RAIN_DAY **  HOLIDAY
##3번 시도 ITEM_CNT * PRICE . MAXTEMP *** SALEDAY ***  RAIN_DAY **  HOLIDAY .
##4번 시도 ITEM_CNT * PRICE . MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
##5번 시도 ITEM_CNT * PRICE MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
summary(lm.fit)
##1번 시도 ITEM_CNT * PRICE   MAXTEMP *** SALEDAY ***  RAIN_DAY *   HOLIDAY
##2번 시도 ITEM_CNT . PRICE   MAXTEMP *** SALEDAY ***  RAIN_DAY **  HOLIDAY
##3번 시도 ITEM_CNT * PRICE . MAXTEMP *** SALEDAY ***  RAIN_DAY **  HOLIDAY .
##4번 시도 ITEM_CNT * PRICE . MAXTEMP *** SALEDAY ***  RAIN_DAY *  HOLIDAY *
##5번 시도 ITEM_CNT * PRICE   MAXTEMP *** SALEDAY ***  RAIN_DAY **  HOLIDAY
summary(lm.fit)
lm.fit2 = step(lm.fit, method="both")
summary(lm.fit2)
lm.pred = predict(lm.fit2, newdata=juice_test)
kk_lm = mean((lm.pred-juice_test$Count_QTY)^2)
kk_lm
sqrt(kk_lm)
rsq(lm.pred, juice_test$Count_QTY)
## plot 만들기
x = seq(1,100)
y = x
plot(lm.pred, juice_test$Count_QTY, xlim=c(20, 45), ylim=c(20, 45))
abline(x,y, col="red")
## 변수 HOLIDAY와 PRICE제거
juice_train_rm_hd_pr = juice_train[, -c(2,6)]
juice_test_rm_hd_pr = juice_test[,-c(2,6)]
lm.fit3 = lm(Count_QTY~., data=juice_train_rm_hd_pr)
summary(lm.fit3)
lm.fit4 = step(lm.fit3, method="both")
lm.pred2 = predict(lm.fit4, newdata=juice_test_rm_hd_pr)
rsq(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY, xlim=c(20, 45), ylim=c(20, 45))
kk_lm2 = mean((lm.pred2-juice_train_rm_hd_pr$Count_QTY)^2)
kk_lm2
sqrt(kk_lm2)
## 변수 HOLIDAY와 PRICE제거
juice_train_rm_hd_pr = juice_train[, -c(2,6)]
juice_test_rm_hd_pr = juice_test[,-c(2,6)]
lm.fit3 = lm(Count_QTY~., data=juice_train_rm_hd_pr)
summary(lm.fit3)
lm.fit4 = step(lm.fit3, method="both")
lm.pred2 = predict(lm.fit4, newdata=juice_test_rm_hd_pr)
kk_lm2 = mean((lm.pred2-juice_train_rm_hd_pr$Count_QTY)^2)
juice_train_rm_hd_pr
kk_lm2 = mean((lm.pred2-juice_train_rm_hd_pr$Count_QTY)^2)
kk_lm2
sqrt(kk_lm2)
lm.pred2
juice_train_rm_hd_pr
kk_lm2 = mean((lm.pred2-juice_test_rm_hd_pr$Count_QTY)^2)
kk_lm2
sqrt(kk_lm2)
rsq(lm.pred2, juice_test_rm_hd_pr$Count_QTY)
plot(lm.pred2, juice_test_rm_hd_pr$Count_QTY, xlim=c(20, 45), ylim=c(20, 45))
abline(x,y, col="red")
juice_train_rm_hd_pr_ic
## 변수 HOLIDAY와 PRICE, ITEN_CNT제거
juice_train_rm_hd_pr_ic = juice_train[, -c(1,2,6)]
juice_train_rm_hd_pr_ic
juice_test_rm_hd_pr_ic = juice_test[,-c(1,2,6)]
lm.fit5 = lm(Count_QTY~., data=juice_train_rm_hd_pr_ic)
summary(lm.fit3)
lm.fit6 = step(lm.fit5, method="both")
lm.pred3 = predict(lm.fit4, newdata=juice_test_rm_hd_pr_ic)
## 변수 HOLIDAY와 PRICE, ITEN_CNT제거
juice_train_rm_hd_pr_ic = juice_train[, -c(1,2,6)]
juice_test_rm_hd_pr_ic = juice_test[,-c(1,2,6)]
lm.fit5 = lm(Count_QTY~., data=juice_train_rm_hd_pr_ic)
summary(lm.fit5)
lm.fit6 = step(lm.fit5, method="both")
lm.pred3 = predict(lm.fit6, newdata=juice_test_rm_hd_pr_ic)
kk_lm3 = mean((lm.pred3-juice_test_rm_hd_pr_ic$Count_QTY)^2)
kk_lm3
sqrt(kk_lm3)
rsq(lm.pred3, juice_test_rm_hd_pr_ic$Count_QTY)
plot(lm.pred3, juice_test_rm_hd_pr_ic$Count_QTY, xlim=c(20, 45), ylim=c(20, 45))
abline(x,y, col="red")
##### 의사결정트리 기법1 using tree ##### =>평균제곱오차: 29.55897 제곱근: 5.436817
install.packages('tree')
install.packages("tree")
setwd("D:/workspace-Jwp/python/DataScience/new_lec")
data <- read.csv("data/sales_건강음료.csv")
head(data)
# 데이터 처리 -----------------------------------
library(stringr)
data['MON'] <- str_sub(data$YM, 5, 6)
head(data)
data1 <- data[,-c(1:2)]
data1$MON <- as.numeric(data1$MON)
head(data1)
# 다중회귀모델 ----------------------------------
model <- lm(QTY~., data=data1)
summary(model)
# 단계선택법 ------------------------------------
model_step <- step(model, method='both')
summary(model)
# 좀더 발전된 변수선택방법 ----------------------
install.packages('leaps')
library(leaps)
leaps <- regsubsets(QTY~., data=data1, nbest=4)
plot(leaps, scale = 'bic')
plot(leaps, scale = 'Cp')
plot(leaps, scale = 'adjr2')
plot(leaps, scale = 'bic')
plot(leaps, scale = 'Cp')
